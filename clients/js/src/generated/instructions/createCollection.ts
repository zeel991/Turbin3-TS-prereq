/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { Q3_PRE_REQS_RS_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_COLLECTION_DISCRIMINATOR = new Uint8Array([
  156, 251, 92, 54, 233, 2, 16, 82,
]);

export function getCreateCollectionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_COLLECTION_DISCRIMINATOR
  );
}

export type CreateCollectionInstruction<
  TProgram extends string = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountCollection extends string
        ? WritableSignerAccount<TAccountCollection> &
            AccountSignerMeta<TAccountCollection>
        : TAccountCollection,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCollectionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreateCollectionInstructionDataArgs = {};

export function getCreateCollectionInstructionDataEncoder(): FixedSizeEncoder<CreateCollectionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_COLLECTION_DISCRIMINATOR })
  );
}

export function getCreateCollectionInstructionDataDecoder(): FixedSizeDecoder<CreateCollectionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateCollectionInstructionDataCodec(): FixedSizeCodec<
  CreateCollectionInstructionDataArgs,
  CreateCollectionInstructionData
> {
  return combineCodec(
    getCreateCollectionInstructionDataEncoder(),
    getCreateCollectionInstructionDataDecoder()
  );
}

export type CreateCollectionAsyncInput<
  TAccountCreator extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  collection: TransactionSigner<TAccountCollection>;
  authority?: Address<TAccountAuthority>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCreateCollectionInstructionAsync<
  TAccountCreator extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
>(
  input: CreateCollectionAsyncInput<
    TAccountCreator,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateCollectionInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? Q3_PRE_REQS_RS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 108, 108, 101, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.collection.value)),
      ],
    });
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCollectionInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateCollectionInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >);
}

export type CreateCollectionInput<
  TAccountCreator extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  collection: TransactionSigner<TAccountCollection>;
  authority: Address<TAccountAuthority>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCreateCollectionInstruction<
  TAccountCreator extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
>(
  input: CreateCollectionInput<
    TAccountCreator,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCollectionInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountCollection,
  TAccountAuthority,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? Q3_PRE_REQS_RS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCollectionInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateCollectionInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >);
}

export type ParsedCreateCollectionInstruction<
  TProgram extends string = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    collection: TAccountMetas[1];
    authority: TAccountMetas[2];
    mplCoreProgram: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateCollectionInstructionData;
};

export function parseCreateCollectionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateCollectionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      collection: getNextAccount(),
      authority: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateCollectionInstructionDataDecoder().decode(instruction.data),
  };
}
