/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { Q3_PRE_REQS_RS_PROGRAM_ADDRESS } from '../programs';

/** PreReqTsNotCompleted: TS submission not completed. */
export const Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_NOT_COMPLETED = 0x1770; // 6000
/** PreReqTsAlreadyCompleted: TS submission already completed. */
export const Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_ALREADY_COMPLETED = 0x1771; // 6001
/** PreReqRsAlreadyCompleted: Rust submission already completed. */
export const Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_ALREADY_COMPLETED = 0x1772; // 6002
/** PreReqRsNotInTimeWindow: Submission not allowed. */
export const Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_NOT_IN_TIME_WINDOW = 0x1773; // 6003

export type Q3PreReqsRsError =
  | typeof Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_ALREADY_COMPLETED
  | typeof Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_NOT_IN_TIME_WINDOW
  | typeof Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_ALREADY_COMPLETED
  | typeof Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_NOT_COMPLETED;

let q3PreReqsRsErrorMessages: Record<Q3PreReqsRsError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  q3PreReqsRsErrorMessages = {
    [Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_ALREADY_COMPLETED]: `Rust submission already completed.`,
    [Q3_PRE_REQS_RS_ERROR__PRE_REQ_RS_NOT_IN_TIME_WINDOW]: `Submission not allowed.`,
    [Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_ALREADY_COMPLETED]: `TS submission already completed.`,
    [Q3_PRE_REQS_RS_ERROR__PRE_REQ_TS_NOT_COMPLETED]: `TS submission not completed.`,
  };
}

export function getQ3PreReqsRsErrorMessage(code: Q3PreReqsRsError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (q3PreReqsRsErrorMessages as Record<Q3PreReqsRsError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isQ3PreReqsRsError<TProgramErrorCode extends Q3PreReqsRsError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
    code
  );
}
