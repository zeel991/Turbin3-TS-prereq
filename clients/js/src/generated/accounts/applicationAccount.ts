/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const APPLICATION_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  222, 181, 17, 200, 212, 149, 64, 88,
]);

export function getApplicationAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPLICATION_ACCOUNT_DISCRIMINATOR
  );
}

export type ApplicationAccount = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  bump: number;
  preReqTs: boolean;
  preReqRs: boolean;
  github: string;
};

export type ApplicationAccountArgs = {
  user: Address;
  bump: number;
  preReqTs: boolean;
  preReqRs: boolean;
  github: string;
};

export function getApplicationAccountEncoder(): Encoder<ApplicationAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['preReqTs', getBooleanEncoder()],
      ['preReqRs', getBooleanEncoder()],
      ['github', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: APPLICATION_ACCOUNT_DISCRIMINATOR })
  );
}

export function getApplicationAccountDecoder(): Decoder<ApplicationAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['preReqTs', getBooleanDecoder()],
    ['preReqRs', getBooleanDecoder()],
    ['github', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getApplicationAccountCodec(): Codec<
  ApplicationAccountArgs,
  ApplicationAccount
> {
  return combineCodec(
    getApplicationAccountEncoder(),
    getApplicationAccountDecoder()
  );
}

export function decodeApplicationAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ApplicationAccount, TAddress>;
export function decodeApplicationAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ApplicationAccount, TAddress>;
export function decodeApplicationAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ApplicationAccount, TAddress>
  | MaybeAccount<ApplicationAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getApplicationAccountDecoder()
  );
}

export async function fetchApplicationAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ApplicationAccount, TAddress>> {
  const maybeAccount = await fetchMaybeApplicationAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeApplicationAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ApplicationAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeApplicationAccount(maybeAccount);
}

export async function fetchAllApplicationAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ApplicationAccount>[]> {
  const maybeAccounts = await fetchAllMaybeApplicationAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeApplicationAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ApplicationAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeApplicationAccount(maybeAccount)
  );
}
