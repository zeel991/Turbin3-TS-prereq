/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { Q3_PRE_REQS_RS_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SUBMIT_TS_DISCRIMINATOR = new Uint8Array([
  137, 241, 199, 223, 125, 33, 85, 217,
]);

export function getSubmitTsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SUBMIT_TS_DISCRIMINATOR);
}

export type SubmitTsInstruction<
  TProgram extends string = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountAccount extends string
        ? WritableAccount<TAccountAccount>
        : TAccountAccount,
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & AccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SubmitTsInstructionData = { discriminator: ReadonlyUint8Array };

export type SubmitTsInstructionDataArgs = {};

export function getSubmitTsInstructionDataEncoder(): FixedSizeEncoder<SubmitTsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SUBMIT_TS_DISCRIMINATOR })
  );
}

export function getSubmitTsInstructionDataDecoder(): FixedSizeDecoder<SubmitTsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSubmitTsInstructionDataCodec(): FixedSizeCodec<
  SubmitTsInstructionDataArgs,
  SubmitTsInstructionData
> {
  return combineCodec(
    getSubmitTsInstructionDataEncoder(),
    getSubmitTsInstructionDataDecoder()
  );
}

export type SubmitTsAsyncInput<
  TAccountUser extends string = string,
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  account?: Address<TAccountAccount>;
  mint: TransactionSigner<TAccountMint>;
  collection: Address<TAccountCollection>;
  authority?: Address<TAccountAuthority>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getSubmitTsInstructionAsync<
  TAccountUser extends string,
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
>(
  input: SubmitTsAsyncInput<
    TAccountUser,
    TAccountAccount,
    TAccountMint,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SubmitTsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAccount,
    TAccountMint,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? Q3_PRE_REQS_RS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.account.value) {
    accounts.account.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 114, 101, 114, 101, 113, 115])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 108, 108, 101, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.collection.value)),
      ],
    });
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getSubmitTsInstructionDataEncoder().encode({}),
    programAddress,
  } as SubmitTsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAccount,
    TAccountMint,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >);
}

export type SubmitTsInput<
  TAccountUser extends string = string,
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  account: Address<TAccountAccount>;
  mint: TransactionSigner<TAccountMint>;
  collection: Address<TAccountCollection>;
  authority: Address<TAccountAuthority>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getSubmitTsInstruction<
  TAccountUser extends string,
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
>(
  input: SubmitTsInput<
    TAccountUser,
    TAccountAccount,
    TAccountMint,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SubmitTsInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountAccount,
  TAccountMint,
  TAccountCollection,
  TAccountAuthority,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? Q3_PRE_REQS_RS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getSubmitTsInstructionDataEncoder().encode({}),
    programAddress,
  } as SubmitTsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAccount,
    TAccountMint,
    TAccountCollection,
    TAccountAuthority,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >);
}

export type ParsedSubmitTsInstruction<
  TProgram extends string = typeof Q3_PRE_REQS_RS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    account: TAccountMetas[1];
    mint: TAccountMetas[2];
    collection: TAccountMetas[3];
    authority: TAccountMetas[4];
    mplCoreProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: SubmitTsInstructionData;
};

export function parseSubmitTsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSubmitTsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      account: getNextAccount(),
      mint: getNextAccount(),
      collection: getNextAccount(),
      authority: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSubmitTsInstructionDataDecoder().decode(instruction.data),
  };
}
